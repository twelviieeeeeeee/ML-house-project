import pandas as pd

import joblib




df = pd.read_csv("data/housing.csv")

print(df.head())

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
print(df.isnull().sum())

# –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
print(df.describe())

# –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
print(df.dtypes)

# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å —Ü–µ–Ω–æ–π
print(df.select_dtypes(include=["number"]).corr()["price"].sort_values(ascending=False))


# –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
df = df.dropna()

print(df.columns)  # –í—ã–≤–µ–¥–µ—Ç –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏

# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —á–∏—Å–ª–∞
df = pd.get_dummies(df, columns=["area"], drop_first=True)

df = pd.get_dummies(df, columns=["furnishingstatus"], drop_first=True)


print(df.head())  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

binary_columns = ["mainroad", "guestroom", "basement", "hotwaterheating", "airconditioning", "prefarea"]
for col in binary_columns:
    df[col] = df[col].map({"yes": 1, "no": 0})  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ 0 –∏ 1


from sklearn.model_selection import train_test_split

X = df.drop("price", axis=1)  # –í—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫—Ä–æ–º–µ —Ü–µ–Ω—ã
y = df["price"]  # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

# –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 80% train –∏ 20% test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"–†–∞–∑–º–µ—Ä train: {X_train.shape}, test: {X_test.shape}")

from model import train_and_save_model, evaluate_model

train_and_save_model(X_train, y_train)  # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
evaluate_model(X_test, y_test)  # –¢–µ—Å—Ç–∏—Ä—É–µ–º


def predict_new(flat_features):
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model = joblib.load("house_price_model.pkl")  # –ò–º—è –º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—à—å

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏
    feature_names = [
        "area", "bedrooms", "bathrooms", "stories", "parking", 
        "mainroad", "guestroom", "basement", "hotwaterheating", 
        "airconditioning", "prefarea", "furnishingstatus"
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    if len(flat_features) != len(feature_names):
        raise ValueError(f"–û–∂–∏–¥–∞–ª–æ—Å—å {len(feature_names)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(flat_features)}")

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    flat_features_df = pd.DataFrame([flat_features], columns=feature_names)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (yes/no ‚Üí 1/0)
    binary_columns = ["mainroad", "guestroom", "basement", "hotwaterheating", "airconditioning", "prefarea"]
    for col in binary_columns:
        flat_features_df[col] = flat_features_df[col].map({"yes": 1, "no": 0})

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –¥–∞–º–º–∏-–ø—Ä–∏–∑–Ω–∞–∫–∏
    flat_features_df = pd.get_dummies(flat_features_df, columns=["furnishingstatus"], drop_first=True)

    # –ü—Ä–∏–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∫ —Ñ–æ—Ä–º–∞—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏
    trained_columns = joblib.load("trained_columns.pkl")  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
    flat_features_df = flat_features_df.reindex(columns=trained_columns, fill_value=0)

    # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    price = model.predict(flat_features_df)

    print(f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {price[0]:,.2f} —Ä—É–±.")


# –ü—Ä–∏–º–µ—Ä –Ω–æ–≤–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã
new_flat = [5000, 3, 2, 2, 1, "yes", "no", "no", "yes", "yes", "no", "semi-furnished"]
predict_new(new_flat)


import matplotlib.pyplot as plt
import seaborn as sns
    

import matplotlib.pyplot as plt
import seaborn as sns

# –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö vs –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
def plot_results(X_test, y_test):
    model = joblib.load("house_price_model.pkl")
    y_pred = model.predict(X_test)

    plt.figure(figsize=(8,5))
    sns.scatterplot(x=y_test, y=y_pred)
    plt.xlabel("–†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
    plt.ylabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞")
    plt.title("–†–µ–∞–ª—å–Ω—ã–µ vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã")
    plt.show()

plot_results(X_test, y_test)
